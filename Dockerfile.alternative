# This is an alternative multi-stage build approach
# It's more Dockerfile-native but results in a slightly larger image than the script method

# Build stage
FROM alpine:latest AS builder

# Install build dependencies
RUN apk add --no-cache gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers wget

# Download and extract Nginx
WORKDIR /tmp
RUN wget https://nginx.org/download/nginx-1.24.0.tar.gz && \
    tar -zxf nginx-1.24.0.tar.gz

# Configure and build Nginx with minimal modules using standard paths
WORKDIR /tmp/nginx-1.24.0
RUN ./configure \
    --prefix=/var/www \
    --sbin-path=/usr/local/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --pid-path=/var/run/nginx.pid \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --with-pcre \
    --with-http_ssl_module \
    --with-http_v2_module \
    --without-http_scgi_module \
    --without-http_uwsgi_module \
    --without-http_fastcgi_module \
    --without-http_geo_module \
    --without-http_map_module \
    --without-http_split_clients_module \
    --without-http_referer_module \
    --without-http_rewrite_module \
    --without-http_proxy_module \
    --without-http_memcached_module \
    --without-mail_pop3_module \
    --without-mail_imap_module \
    --without-mail_smtp_module && \
    make && \
    make install

# Prepare minimal filesystem with standard paths
RUN mkdir -p /nginx-minimal/etc/nginx && \
    mkdir -p /nginx-minimal/var/log/nginx && \
    mkdir -p /nginx-minimal/var/run && \
    mkdir -p /nginx-minimal/var/www && \
    mkdir -p /nginx-minimal/usr/local/sbin && \
    cp -r /etc/nginx/* /nginx-minimal/etc/nginx/ && \
    cp /usr/local/sbin/nginx /nginx-minimal/usr/local/sbin/

# Create proper passwd and group files with nobody user and group
RUN mkdir -p /nginx-minimal/etc && \
    echo 'root:x:0:0:root:/root:/bin/sh' > /nginx-minimal/etc/passwd && \
    echo 'nobody:x:65534:65534:nobody:/:/sbin/nologin' >> /nginx-minimal/etc/passwd && \
    echo 'root:x:0:' > /nginx-minimal/etc/group && \
    echo 'nobody:x:65534:' >> /nginx-minimal/etc/group

# Find and copy required libraries
RUN mkdir -p /nginx-minimal/lib && \
    ldd /usr/local/sbin/nginx | grep "=> /" | awk '{print $3}' | \
    xargs -I '{}' cp -v '{}' /nginx-minimal/lib/ && \
    cp -v /lib/ld-musl-*.so.1 /nginx-minimal/lib/ 2>/dev/null || true

# Create nginx.conf with standard paths
RUN cat > /nginx-minimal/etc/nginx/nginx.conf << 'EOF'
user nobody;
worker_processes 1;
events { worker_connections 1024; }
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # Log configuration
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    server {
        listen       80;
        server_name  localhost;
        location / {
            root   /var/www;
            index  index.html index.htm;
        }
    }
}
EOF

# Create a simple index.html file
RUN mkdir -p /nginx-minimal/var/www && \
    echo '<html><body><h1>Hello from minimal Nginx!</h1></body></html>' > \
    /nginx-minimal/var/www/index.html

# Ensure log directory exists and has proper permissions
RUN chmod 755 /nginx-minimal/var/log/nginx && \
    touch /nginx-minimal/var/log/nginx/access.log /nginx-minimal/var/log/nginx/error.log && \
    chmod 644 /nginx-minimal/var/log/nginx/access.log /nginx-minimal/var/log/nginx/error.log

# Final image
FROM scratch

# Copy the entire minimal filesystem
COPY --from=builder /nginx-minimal /

# Define volumes for configuration, logs and web content
VOLUME ["/etc/nginx", "/var/log/nginx", "/var/www"]

# Expose port
EXPOSE 80

# Set command to run Nginx directly
CMD ["/usr/local/sbin/nginx", "-g", "daemon off;", "-c", "/etc/nginx/nginx.conf"]